package webtrekk.android.sdk

import io.mockk.every
import io.mockk.mockk
import io.mockk.unmockkObject
import io.mockk.verify
import kotlinx.coroutines.runBlocking
import org.hamcrest.CoreMatchers.equalTo
import org.hamcrest.MatcherAssert
import org.junit.After
import org.junit.Before
import org.junit.FixMethodOrder
import org.junit.Test
import org.junit.runners.MethodSorters
import webtrekk.android.sdk.data.model.GenerationMode

@FixMethodOrder(value = MethodSorters.NAME_ASCENDING)
class ActiveConfigTest {

    /*
    Activity Auto Tracking	2^9 (512)
    Fragments Auto Tracking	2^8 (256)
    Auto Tracking	2^7 (128)
    Background Sendout	2^6 (64)
    User Matching	2^5 (32)
    Webview	2^4 (16)
    Set EverId	2^3 (8)
    AppVersion in every Request	2^2 (4)
    Crash Tracking	2^1 (2)
    Batch Support	2^0 (1)
*/

    private lateinit var config: ActiveConfig

    @Before
    fun setup() {
        config = mockk(relaxed = true) {
            every { isEverIdSetByUser() } answers { callOriginal() }
            every { printUsageStatisticCalculation() } answers { callOriginal() }
            every { calculateUsageParam() } answers { callOriginal() }
        }
    }

    @After
    fun tearDown() {
        unmockkObject(config)
    }

    @Test
    fun calculcate_when_activity_autotracking_set_test() = runBlocking {
        config.apply {
            every { isActivityAutoTrackingEnabled() } answers { true }
        }
        val result = config.calculateUsageParam()
        verify { config.isActivityAutoTrackingEnabled() }
        MatcherAssert.assertThat(result, equalTo(512))
    }

    @Test
    fun calculcate_when_fragment_autotracking_set_test() = runBlocking {
        config.apply {
            every { isFragmentAutoTrackingEnabled() } answers { true }
        }
        val result = config.calculateUsageParam()
        verify { config.isFragmentAutoTrackingEnabled() }
        MatcherAssert.assertThat(result, equalTo(256))
    }

    @Test
    fun calculcate_when_autotracking_set_test() = runBlocking {
        config.apply {
            every { isAutoTrackingEnabled() } answers { true }
        }
        val result = config.calculateUsageParam()
        verify { config.isAutoTrackingEnabled() }
        MatcherAssert.assertThat(result, equalTo(128))
    }

    @Test
    fun calculcate_when_user_matching_set_test() = runBlocking {
        config.apply {
            every { isUserMatchingEnabled() } answers { true }
        }
        val result = config.calculateUsageParam()
        verify { config.isUserMatchingEnabled() }
        MatcherAssert.assertThat(result, equalTo(32))
    }

    @Test
    fun calculcate_everid_set_by_user_test() = runBlocking {
        config.apply {
            every { everId } returns "2222"
            every { everIdMode } returns GenerationMode.USER_GENERATED
        }
        val result = config.calculateUsageParam()
        verify { config.isEverIdSetByUser() }
        MatcherAssert.assertThat(result, equalTo(8))
    }

    @Test
    fun calculcate_everid_autogenerated_test() = runBlocking {
        config.apply {
            every { everId } returns "2222"
            every { everIdMode } returns GenerationMode.AUTO_GENERATED
        }
        val result = config.calculateUsageParam()
        verify { config.isEverIdSetByUser() }
        MatcherAssert.assertThat(result, equalTo(0))
    }


    @Test
    fun calculcate_when_send_app_version_in_every_request_set_test() = runBlocking {
        config.apply {
            every { sendVersionInEveryRequest() } answers { true }
        }
        val result = config.calculateUsageParam()
        verify { config.sendVersionInEveryRequest() }
        MatcherAssert.assertThat(result, equalTo(4))
    }


    @Test
    fun calculcate_when_crash_tracking_set_test() = runBlocking {
        config.apply {
            every { exceptionLogLevel } returns  ExceptionType.ALL
        }
        val result = config.calculateUsageParam()
        MatcherAssert.assertThat(result, equalTo(2))
    }


    @Test
    fun calculcate_when_batch_support_set_test() = runBlocking {
        config.apply {
            every { isBatchSupportEnabled() } answers { true }
        }
        val result = config.calculateUsageParam()
        verify { config.isBatchSupportEnabled() }
        MatcherAssert.assertThat(result, equalTo(1))
    }
}