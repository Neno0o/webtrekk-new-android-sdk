/*
 *  MIT License
 *
 *  Copyright (c) 2019 Webtrekk GmbH
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 *
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.appdistribution'

def getTrackDomain() {
    File localPropFile = project.rootProject.file('local.properties')
    Properties properties = new Properties()
    if (localPropFile.exists()) {
        properties.load(localPropFile.newDataInputStream())
        return properties.getProperty("trackDomain");
    } else {
        if (System.getenv('trackDomain') != null) {
            properties.setProperty("trackDomain", System.getenv('trackDomain'))
        } else {
            return "www.webtrekk.com"
        }

    }
    return properties.getProperty("trackDomain")
}

def getTrackIds() {
    File localPropFile = project.rootProject.file('local.properties')
    Properties properties = new Properties()
    if (localPropFile.exists()) {
        properties.load(localPropFile.newDataInputStream())
        return properties.getProperty("trackIds")
    } else {
        if (System.getenv('trackIds') != null) {
            properties.setProperty("trackIds", System.getenv('trackIds'))
        } else {
            return "12312"
        }
    }
    return properties.getProperty("trackIds")
}

android {
    compileSdkVersion versions.compileSdkVersion
    buildToolsVersion versions.buildTools

    defaultConfig {
        applicationId "com.example.webtrekk.androidsdk"
        minSdkVersion versions.minSdkVersion
        targetSdkVersion versions.targetSdkVersion
        versionCode 1
        versionName "1.0.3"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "DOMEIN", "\"" + getTrackDomain() + "\""
        buildConfigField "String", "TRACK_IDS", "\"" + getTrackIds() + "\""

    }
    
    lintOptions {
        abortOnError false
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
    }

    buildTypes {
        debug {
            firebaseAppDistribution {
                releaseNotes="This is test build for testers to accept the invitation and get the app :)"
                testersFile="testers_webtrekk.txt"
            }
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$versions.kotlinVersion"
    implementation "androidx.appcompat:appcompat:$versions.appCompatVersion"
    implementation "androidx.constraintlayout:constraintlayout:$versions.constraintLayoutVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.kotlinCoroutines"
    implementation "androidx.work:work-runtime-ktx:$versions.workManagerVersion"
    implementation 'com.squareup.leakcanary:leakcanary-android:2.8.1'
    implementation "com.squareup.okhttp3:okhttp:$versions.okHttpVersion"
    implementation 'com.google.android.exoplayer:exoplayer:2.17.0'

    implementation platform('com.google.firebase:firebase-bom:29.0.4')
    implementation('com.google.firebase:firebase-messaging')
    implementation("com.google.firebase:firebase-crashlytics")

    implementation 'com.mapp.sdk:mapp-android:6.0.17'

    implementation(project(':android-sdk'))
    //implementation ("com.mapp.sdk:intelligence-android:5.1.2")

    testImplementation "junit:junit:$versions.junitVersion"
    androidTestImplementation "androidx.test:runner:$versions.runnerVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$versions.espressoCoreVersion"
}
